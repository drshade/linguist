// This file is auto-generated by build.rs. DO NOT EDIT.

use linguist_types::{Heuristics, Languages, VendorPatterns};
use once_cell::sync::Lazy;

/// Binary data containing all language definitions, serialized as JSON
const LANGUAGES_DATA: &[u8] = include_bytes!(concat!(env!("OUT_DIR"), "/languages.json"));

/// Static reference to all language definitions, deserialized from JSON at first access
pub static LANGUAGES: Lazy<Languages> = Lazy::new(|| {
    serde_json::from_slice(LANGUAGES_DATA)
        .expect("Failed to deserialize languages.json - this is a bug in the build process")
});

/// Binary data containing heuristics for language disambiguation, serialized as JSON
const HEURISTICS_DATA: &[u8] = include_bytes!(concat!(env!("OUT_DIR"), "/heuristics.json"));

/// Static reference to language disambiguation heuristics, deserialized from JSON at first access
pub static HEURISTICS: Lazy<Heuristics> = Lazy::new(|| {
    serde_json::from_slice(HEURISTICS_DATA)
        .expect("Failed to deserialize heuristics.json - this is a bug in the build process")
});

/// Binary data containing vendor file patterns, serialized as JSON
const VENDOR_DATA: &[u8] = include_bytes!(concat!(env!("OUT_DIR"), "/vendor.json"));

/// Static reference to vendor file patterns, deserialized from JSON at first access
pub static VENDOR: Lazy<VendorPatterns> = Lazy::new(|| {
    serde_json::from_slice(VENDOR_DATA)
        .expect("Failed to deserialize vendor.json - this is a bug in the build process")
});
